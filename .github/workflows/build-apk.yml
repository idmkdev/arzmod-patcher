name: Build APKs

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Создать новый релиз'
        required: true
        type: boolean
        default: true

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: write
      id-token: write
      statuses: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set build status to pending
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'pending',
              context: 'Build Check',
              description: 'Build in progress...'
            })

      - name: Get Latest Version
        id: get_version
        run: |
          VERSION_INFO=$(curl -s http://mob.maz-ins.com/game/release/app_version.json)
          LAUNCHER_VERSION=$(echo $VERSION_INFO | jq -r '.launcherVersion')
          LAUNCHER_VERSION_NAME=$(echo $VERSION_INFO | jq -r '.launcherVersionName')
          echo "launcher_version=$LAUNCHER_VERSION" >> $GITHUB_OUTPUT
          echo "launcher_version_name=$LAUNCHER_VERSION_NAME" >> $GITHUB_OUTPUT

      - name: Get Commit History
        if: github.event_name == 'workflow_dispatch' && inputs.create_release
        id: get_commits
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")
          COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)")
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Set release changelog
        id: changelog
        run: |
          if [ -z "${{ steps.get_commits.outputs.commits }}" ]; then
            echo "changelog=Изменений с последнего релиза нет." >> $GITHUB_OUTPUT
          else
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "${{ steps.get_commits.outputs.commits }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create Git Tag
        if: github.event_name == 'workflow_dispatch' && inputs.create_release
        id: create_tag
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          TAG_MESSAGE="${{ steps.get_version.outputs.launcher_version_name }}
          Версия лаунчера: ${{ steps.get_version.outputs.launcher_version_name }}
          Номер сборки: ${{ steps.get_version.outputs.launcher_version }}
          
          Изменения с последнего релиза:
          ${{ steps.get_commits.outputs.commits }}"
          
          git tag -a "${{ steps.get_version.outputs.launcher_version }}" -m "$TAG_MESSAGE"
          git push origin "${{ steps.get_version.outputs.launcher_version }}"
          
          echo "tag_name=${{ steps.get_version.outputs.launcher_version }}" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' 

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '21'

      - name: Install Android SDK
        run: |
          sudo apt update
          sudo apt install -y openjdk-21-jdk unzip wget
          wget https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip -O sdk-tools.zip
          mkdir -p $ANDROID_HOME/cmdline-tools
          unzip -q sdk-tools.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH" >> $GITHUB_ENV
      
      - name: Install Build Tools
        run: |
          sdkmanager --sdk_root="$ANDROID_HOME" "platform-tools" "build-tools;30.0.3"
          echo "PATH=$ANDROID_HOME/build-tools/30.0.3:$PATH" >> $GITHUB_ENV

      - name: Setup Apktool
        run: |
          wget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool -O /usr/local/bin/apktool
          wget https://github.com/iBotPeaches/Apktool/releases/download/v2.6.1/apktool_2.6.1.jar -O /usr/local/bin/apktool.jar
          chmod +x /usr/local/bin/apktool
          echo 'alias apktool="java -jar /usr/local/bin/apktool.jar"' >> ~/.bashrc
          source ~/.bashrc

      - name: Prepare for building
        run: chmod +x ./arzmob-classes/dex-tools-v2.4/d2j-dex2jar.sh

      - name: Build Arizona x32
        run: |
          mkdir -p dist
          python main.py -actual
          mv ./app-debug/dist/app-debug.apk ./dist/app-arizona-x32-patched.apk

      - name: Upload Arizona x32
        uses: actions/upload-artifact@v4
        with:
          name: app-arizona-x32-patched
          path: ./dist/app-arizona-x32-patched.apk

      - name: Build Arizona x64
        run: |
          python main.py -actual -x64
          mv ./app-debug/dist/app-debug.apk ./dist/app-arizona-x64-patched.apk

      - name: Upload Arizona x64
        uses: actions/upload-artifact@v4
        with:
          name: app-arizona-x64-patched
          path: ./dist/app-arizona-x64-patched.apk

      - name: Build Rodina x32
        run: |
          python main.py -actual -rodina
          mv ./app-debug/dist/app-debug.apk ./dist/app-rodina-x32-patched.apk

      - name: Upload Rodina x32
        uses: actions/upload-artifact@v4
        with:
          name: app-rodina-x32-patched
          path: ./dist/app-rodina-x32-patched.apk

      - name: Build Rodina x64
        run: |
          python main.py -actual -rodina -x64
          mv ./app-debug/dist/app-debug.apk ./dist/app-rodina-x64-patched.apk

      - name: Upload Rodina x64
        uses: actions/upload-artifact@v4
        with:
          name: app-rodina-x64-patched
          path: ./dist/app-rodina-x64-patched.apk

      - name: Create GitHub Release
        if: github.event_name == 'workflow_dispatch' && inputs.create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.launcher_version }}
          name: ${{ steps.get_version.outputs.launcher_version_name }} (${{ steps.get_version.outputs.launcher_version }})
          body: |
            Версия лаунчера: ${{ steps.get_version.outputs.launcher_version_name }}
            Номер сборки: ${{ steps.get_version.outputs.launcher_version }}

            Изменения с последнего релиза:
            ${{ steps.changelog.outputs.changelog }}
          files: |
            ./dist/app-arizona-x32-patched.apk
            ./dist/app-arizona-x64-patched.apk
            ./dist/app-rodina-x32-patched.apk
            ./dist/app-rodina-x64-patched.apk
          draft: false
          prerelease: false

      - name: Set build status to success
        if: success() && github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              context: 'Build Check',
              description: 'Build completed successfully'
            })

      - name: Set build status to failure
        if: failure() && github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'failure',
              context: 'Build Check',
              description: 'Build failed'
            })

      - name: Cleanup on Failure
        if: failure() && github.event_name == 'workflow_dispatch' && inputs.create_release
        run: |
          git push origin --delete "${{ steps.create_tag.outputs.tag_name }}" || true
